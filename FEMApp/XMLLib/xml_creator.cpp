// Class automatically generated by Dev-C++ New Class wizard

#include "xml_creator.h" // class's header file

// class constructor
CXML_Creator::CXML_Creator( CXML_OutputDevice &o ):out(o),level(0),
	main_element_created(false),parameter_list_creating(false),new_line(false)
{
	// insert your code here
	counter=0;
}

// class destructor
CXML_Creator::~CXML_Creator()
{
	// insert your code here
}


void CXML_Creator::AddRemark( const string &remark )
{

	prepare_new_line();
        create_new_marker( '!', "--");
		out.endl(); out.write_spaces( level + 1 );
	    out << remark; 
   	prepare_new_line();
	out << "-->";
	new_line = true;
}

void CXML_Creator::AddCDATA( const string &free_style )
{
    prepare_new_line();
        create_new_marker( '!', "[CDATA[");
		out.endl(); out.write_spaces( level + 1 );
	    out << free_style;
   	prepare_new_line();
	out << "]]>";
	new_line = true;
}

void CXML_Creator::CloseNode( )
{
	if ( nodes_stack.empty() ) throw CXML_Exception("nodes stack is empty");
	if ( parameter_list_creating ) { out << '>'; parameter_list_creating = false; }

	level--;
	if ( new_line ) { out.endl(); out.write_spaces(level); }
    create_new_marker( '/', nodes_stack.back() ); out << '>';
    nodes_stack.pop_back( );
    new_line = true;

}

void CXML_Creator::AddDOCTYPE( const string &name, bool system, const string &id)
{
    prepare_new_line();
    if ( !nodes_stack.empty() ) throw CXML_Exception("DOCTYPE should be placed after xml header");
    create_new_marker( '!', "DOCTYPE " );
    out << name;
    if ( system ) out << " SYSTEM ";
    else out << " PUBLIC ";
    out << '"' << id << '"' << '>';
	new_line = true;
}



