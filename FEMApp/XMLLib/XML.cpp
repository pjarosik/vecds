// Class automatically generated by Dev-C++ New Class wizard

#include "XML.h" // class's header file
#include "xml_exceptions.h"


// class constructor

CXML::~CXML()
{
   Reset();
}

void CXML::Reset()
{
	ListOfElements::iterator k;
    for (k=elements.begin(); k!=elements.end(); ++k ) delete *k;
}

void CXML::Create( CXML_Creator &creator )
{
    list< CXML_Element* >::iterator k;
    for (k=elements.begin(); k!=elements.end(); ++k )
					CreateElement( creator, **k );
}

void CXML::CreateElement( CXML_Creator &creator, const CXML_Element &elem ) const
{
	ListOfElements::const_iterator k;
    const ListOfElements 	*lelem;
    CXML_Parameter       	*pelem=0;
    CXML_Preprocessing   	*ppelem=0;
    CXML_Remark             *relem=0;
    CXML_CDATA              *celem=0;
    CXML_DOCTYPE            *delem=0;
    CXML_Text               *telem=0;
    
	switch( elem.GetType() )
	{
			case XML_NODE 			: 	creator.OpenNode( elem.GetName() );
										lelem=&((CXML_Node&)elem).GetElems();
			                            	for ( k=lelem->begin(); k!=lelem->end(); ++k)
			                            	    CreateElement( creator, **k );
			                            creator.CloseNode();
										break;
										
    		case XML_PARAMETER 		:   pelem = (CXML_Parameter*)&elem;
    		                            creator.AddParameter( elem.GetName(), pelem->GetValue() );
										break;
										
			case XML_HEADER 		: 	creator.AddHeader( "version=\"1.0\"" );
										break;
										
			case XML_PREPROCESSING 	: 	ppelem = (CXML_Preprocessing*)&elem;
			                            creator.AddProcessingDir( elem.GetName(), ppelem->GetContent() );
										break;
										
			case XML_REMARK 		:   relem = (CXML_Remark*)&elem;
			                            creator.AddRemark( relem->GetRemark() );
										break;
										
			case XML_CDATA 			:   celem = (CXML_CDATA*)&elem;
			                            creator.AddCDATA( celem->GetData() );
										break;
										
			case XML_DOCTYPE 		:   delem = (CXML_DOCTYPE*)&elem;
			                            creator.AddDOCTYPE( elem.GetName(), delem->IsSystem(), delem->GetId() );
										break;
            case XML_TEXT 		   :    telem = (CXML_Text*)&elem;
			                            creator.AddText( telem->GetText() );
										break;
										
			default            		: throw CXML_Exception("element creation failed. Unknown element type");

	}
}

void  CXML::FindNodes( const string &filter, vector< const CXML_Node * > &nodes ) const
{
	ListOfElements::const_iterator i;
	nodes.clear();
	for ( i = elements.begin();  i != elements.end(); i++ )
	{
		if ( (*i)->GetType() == XML_NODE && (*i)->GetName() == filter )
			nodes.push_back( dynamic_cast<CXML_Node*>( *i) );
	}
}