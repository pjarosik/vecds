// Class automatically generated by Dev-C++ New Class wizard

#ifndef XML_CREATOR_H
#define XML_CREATOR_H

#include "xml_outputdevice.h"
#include "xml_exceptions.h"

#include <vector>
#include <iostream>
#include <sstream>
#include <iomanip>
using namespace std;

/**
 * No description
 */
class CXML_Creator
{
	public:
		// class constructor
		CXML_Creator( CXML_OutputDevice &o );
// Header creation
		void AddHeader( const string &hcn );
// Preprocessing directive creation
		void AddProcessingDir( const string &name, const string &hcn );
// Remark creation
		void AddRemark( const string &remark);
// CDATA creation
	    void AddCDATA( const string &free_style );
// Node opening
	    void OpenNode( const string &node_name );
// Text creation, by string, by integer value and by double value with given floating point format. An operator is defined.
	    void AddText( const string &cn );
	    void AddText( int value );
   	    CXML_Creator& operator <<( const string &tx) { AddText( tx ); return *this; }
// Node closing
   	    void CloseNode();
// Single node creation with text, integer andn double content.
  	    void AddSingleNode( const string &name, const string &value );
   	    void AddSingleNode( const string &name, int value );
// Node parameter with value defined by string, integer number and double.
	    void AddParameter( const string &name, const string &value );
	    void AddParameter( const string &name, int value );
        void AddParameter( const string &name, unsigned value );
        void AddParameter( const string &name, double value );
// DOCTYPE creation.
	    void AddDOCTYPE( const string &name, bool system, const string &id);
		// class destructor
		~CXML_Creator();
protected:
    unsigned level, counter;
    vector<string>   nodes_stack;
	bool main_element_created, parameter_list_creating, new_line;
    CXML_OutputDevice &out;
    
    void prepare_new_line();
    void create_new_marker(char mc,const string &name);
    void create_new_marker(const string &name);
};

inline void CXML_Creator::AddText( const string &cn )
{
	if ( nodes_stack.empty() ) throw CXML_Exception("content without element");
	if ( parameter_list_creating ) { out << '>'; parameter_list_creating = false; }
	if ( new_line ) { out.endl(); out.write_spaces(level); }
	out << cn << ' ';
}

inline void CXML_Creator::AddText( int value )
{
//	itoa( value, buffer, 10 );
//  sprintf( buffer, "%5i", value);
	ostringstream sout;
	sout << setw(5) << value << ' ';
	AddText( sout.str() );
}

inline void CXML_Creator::create_new_marker(char mc,const string &name)
{
	out << '<' << mc << name;
}

inline void CXML_Creator::create_new_marker(const string &name)
{
   	out << '<' << name;
}

inline void CXML_Creator::prepare_new_line()
{
	if ( parameter_list_creating ) { out << '>'; parameter_list_creating = false; }
	out.endl();
    out.write_spaces( level );
}

inline void CXML_Creator::AddHeader( const string &hcn )
{
	create_new_marker('?',"xml ");
	out << hcn << " ?>";
}

inline void CXML_Creator::AddProcessingDir( const string &name, const string &hcn )
{
    prepare_new_line();
    create_new_marker('?',name);
	out << hcn << " ?>";
	new_line = true;
}

inline void CXML_Creator::OpenNode( const string &node_name )
{
	if ( nodes_stack.empty() && main_element_created )	throw CXML_Exception( "Only one main node can be created. Check initialization" );
    prepare_new_line(); level++;
    create_new_marker( node_name );
    nodes_stack.push_back( node_name );
	parameter_list_creating = true;
	new_line = false;
	main_element_created = true;
	counter++;
}


inline void CXML_Creator::AddParameter( const string &name, const string &value  )
{
	if ( !parameter_list_creating ) throw CXML_Exception("misplaced parameter");
	out << ' ' << name << '=' << '"' << value << '"';
}

inline void CXML_Creator::AddParameter( const string &name, int value  )
{
    if ( !parameter_list_creating ) throw CXML_Exception("misplaced parameter");
    out << ' ' << name << '=' << '"' << value << '"';
}

inline void CXML_Creator::AddParameter( const string &name, unsigned value  )
{
    if ( !parameter_list_creating ) throw CXML_Exception("misplaced parameter");
    out << ' ' << name << '=' << '"' << value << '"';
}

inline void CXML_Creator::AddParameter( const string &name, double value  )
{
    if ( !parameter_list_creating ) throw CXML_Exception("misplaced parameter");
    out << ' ' << name << '=' << '"' << value << '"';
}

inline void CXML_Creator::AddSingleNode( const string &name, const string &value )
{
	OpenNode( name );
	AddText( value );
	CloseNode( );
}

inline void CXML_Creator::AddSingleNode( const string &name,  int value )
{
	OpenNode( name );
	AddText( value );
	CloseNode( );
}

#endif // XML_CREATOR_H
