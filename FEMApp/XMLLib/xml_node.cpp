// Class automatically generated by Dev-C++ New Class wizard

#include "xml_node.h" // class's header file
#include <iostream>
#include <algorithm>
using namespace std;

CXML_Node::~CXML_Node()
{
       list< CXML_Element* >::iterator k;
       for (k = elements.begin(); k!=elements.end(); ++k) delete *k;

	   list< CXML_Parameter* >::iterator l;
       for (l = parameters.begin(); l!=parameters.end(); ++l) delete *l;
}


const CXML_Node*  CXML_Node::FindNode( const string &filter, bool ex ) const
{
	CElemPredicator epr( XML_NODE, filter );

	ListOfElements::const_iterator i = find_if( elements.begin(), elements.end(), epr );
	if ( i == elements.end() ) 
		if ( ex ) throw CXML_Exception("Subnode :" + filter + " not found in node :" + name); 
		else return 0;
	return dynamic_cast< CXML_Node* > ( *i );
}


const CXML_Parameter*  CXML_Node::FindParameter( const string &filter, bool ex ) const
{
	CElemPredicator epr( XML_PARAMETER, filter );

	ListOfParameters::const_iterator i = find_if( parameters.begin(), parameters.end(), epr );
	if ( i == parameters.end() ) 
		if ( ex ) throw CXML_Exception("Parameter :" + filter + " not found in node :" + name ); 
		else return 0;
	return dynamic_cast< CXML_Parameter* > ( *i );
}

void  CXML_Node::FindNodes( const string &filter, list< const CXML_Node * > &nodes, bool ex ) const
{
	ListOfElements::const_iterator i;
	nodes.clear();
	for ( i = elements.begin();  i != elements.end(); i++ )
	{
		if ( (*i)->GetType() == XML_NODE && (*i)->GetName() == filter )
			nodes.push_back( dynamic_cast<CXML_Node*>( *i) );
	}
	if ( nodes.size() == 0 && ex )
		throw CXML_Exception("No nodes named :" + filter + " not found in node :" + name ); 
}