// Class automatically generated by Dev-C++ New Class wizard

#ifndef PLOTXY_H
#define PLOTXY_H

#include "PaintFrame.h" // inheriting class's header file
#include "PlotLine.h"
#include <string>
using namespace std;
/**
 * CPlotXY represents two dimensional plot
 */
 
enum PLOT_TYPES
{
	PLT_XY_AXIS,
	PLT_FRAME1,
	PLT_FRAME2,
	PLT_ASCETIC
};
 
class CPlotXY : public CPaintFrame
{
	public:
		class CSetup
		{
			public:
				CSetup();
				unsigned type, div_x, div_y, scale_x_significand_digit_paint, scale_y_significand_digit_paint ;
				bool   has_description, find_desc_pos; // lines descriptions
				bool   has_scale_x, has_scale_y; // plotted axial values
				double bx, by; // margins at left and down of plot
				double ex, ey;  // margins at rignt and top of plot
				double nx, ny;  // distances between text  description and axial values
				double amx, amy;  // distance between axial values and axies
				double desc_x, desc_y; // position of lines description
				double desc_font_height, value_font_height,lines_font_height; // description font and values font sizes
				string vx_frm, vy_frm;  // axial values format;
		};
		// class constructor
   		CPlotXY( double x, double y, double w, double h, double a );
   		CPlotXY( const CPlotXY &pl );
   		const CPlotXY& operator=( const CPlotXY &pl );
		// class destructor
        virtual	~CPlotXY() { }
        virtual void CalculateContentSize (double &x, double &y, double &fw, double &fh ) { x=0; y=0; fw=100; fh=100*aspect; }
        virtual void Paint( CGraphDevice &gDV ) ;
		void AddPlotLine( const CPlotLine &pl )  { lines.push_back( pl ); }
		CPlotLine& GetLine( unsigned k ) { return lines[ k ];  }
		CSetup& GetSetup() { return setup; }
		const CSetup& GetSetup() const { return setup; }
		void  GetSetup( CSetup &st ) { st = setup; }
		void SetUp( const CSetup &st ) { setup = st; }
		void SetAxialDescriptions( const string &sx, const string &sy ) { x_description=sx; y_description=sy; }
		void EnforceRange( double r1, double r2 ) { IsRangeEnforced = true;  rmin = r1;  rmax = r2; }
		// No description
protected:
        class Transformation
        {
        // No description
            public:
                Transformation( const CMaxMin &maxs, double px, double py );
                double ex( double x ) const { return ( x - lpx ) * cx; }
                double ey( double y ) const { return ( y - lpy ) * cy; }

                double revx( double ex ) const { return ex / cx + lpx; }
                double revy( double ey ) const { return ey / cy + lpy; }

                DPoint2D  TransformPointToPlot( const DPoint2D &pt ) const { return DPoint2D( ex( pt.GetX( ) ) ,  ey( pt.GetY( ) ) ); }
                DPoint2D  TransformPointToReal( const DPoint2D &pt ) const { return DPoint2D( revx( pt.GetX( ) ),  revy( pt.GetY( ) ) ); }

                double lpx, cx, lpy, cy;

        };
		CSetup setup;
		double aspect,rmin,rmax;
		bool IsRangeEnforced;
		vector< CPlotLine > lines;
		string x_description, y_description; // axial descriptions
		// No description
		bool CheckPointInside( const DPoint2D p, const DPoint2D &dim )const;
		// No description
		void PlotPoint(  CGraphDevice &gDV, double x, double y, unsigned type ) const;
        bool FindDescriptionPos( DPoint2D &pos, const DPoint2D &ds_dim, const DPoint2D &pla_dim, const Transformation &tr ) const;
		bool LineSearchDescriptionPos(DPoint2D &pos, const DPoint2D &ddim, const DPoint2D &x1, const DPoint2D &x2, const Transformation &tr) const;
   		CPlotXY() { }
};

#endif // PLOTXY_H
