// Class automatically generated by Dev-C++ New Class wizard

#ifndef CPAINTFRAME_H
#define CPAINTFRAME_H

#include "GraphDevice.h"
#include <vector>
#include <string>
using namespace std;

/*
 * No description
 */
class CPaintFrame
{
	public:
		// class constructor
        CPaintFrame( double a=0.0, double b=0.0, double w=0.0, double h=0.0 );
		// class destructor
		~CPaintFrame();
        virtual void CalculateContentSize (double &x, double &y, double &fw, double &fh )=0;
        virtual void Paint( CGraphDevice &gDV ) =0;
		void SetFrameSize (double x, double y, double fw, double fh ) { xp = x; yp = y; width = fw; height = fh; }
		double xs( double x ) const { return parent ? parent->xs( mx + sc * x ) : mx + sc * x; }
	    double ys( double y ) const { return parent ? parent->ys( my + sc * y ) : my + sc * y; }
	    double scale( double dl = 1.0 ) const { return parent ? parent->scale( dl * sc ) : sc * dl; }
        void   SetScale( double mmx, double mmy, double s ) { mx = mmx + xp, my = mmy + xp; sc = s; }
	    void   SetParent( CPaintFrame *pf ) { parent = pf; }
	    void   MoveWindow( double dx, double dy ) { xp += dx;  mx += dx; yp += dy; my += dy; }
	    void   AddChild(  CPaintFrame *cf ) { ChildWindows.push_back( cf );  cf->SetParent( this ); }
        void   ZoomAll( );
        void   FitToGraphDevice( CGraphDevice &gDV, double marginx=0.0, double marginy=0.0 );
protected:
		double write_set_vertically( double x1, double y1, double y2, const string  &frm, vector<double> v, CGraphDevice &gDV, unsigned sn ) const;
		void write_set_horizontally( double x1, double y1, double x2, const string  &frm, vector<double> v, CGraphDevice &gDV, unsigned sn ) const;
		CPaintFrame  *parent;
        CSpace *m_spaceview;
		vector< CPaintFrame* >    ChildWindows;
		double xp, yp, width, height;
		double mx, my, sc;
		
};

#endif // CPAINTFRAME_H
