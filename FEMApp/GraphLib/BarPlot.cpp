// Class automatically generated by Dev-C++ New Class wizard

#include "BarPlot.h" // class's header file
#include <vector>
#include <algorithm>

using namespace std;

// class constructor

CBarPlot::CSetup::CSetup()
{
    bx = by = 2.0;
    ex = ey = 2.0;
    ny = 2.0;
    bny = 1.0;
	bc = 0.5;
    desc_font_height = 1.5;
	bar_values_font_height = 1.0;
	default_pen = DPen( DColor(0, 0, 0), 0, 1.5 );
	default_brush = DBrush( DColor(150, 150, 150), 0);
}

CBarPlot::CBarPlot( double x, double y, double w, double h, double a ):CPaintFrame( x, y, w, h ),aspect( a )
{
	plot_description = "bar plot";
}

void CBarPlot::Paint( CGraphDevice &gDV ) const
{
	if ( !bar_values.size() ) return;

	unsigned k;
    gDV.Rectangle( xs(0), ys(0), xs(100.0), ys( aspect  * 100.0 ) ); // - for testing only

    double tscale=scale(), h_size, plot_height = 100 * aspect , ox, oy, plot_area_width, plot_area_height, arrow = 5.0;

// Dimeension of plot elements calculations

	double hmin=0.0, hmax=0.0, dvalue = 0.0;
	hmin = *min_element( bar_values.begin(), bar_values.end() );
	hmax = *max_element( bar_values.begin(), bar_values.end() );
	
	if ( hmin > 0.0 ) hmin = 0.0;
	if ( hmax < 0.0 ) hmax = 0.0;
	
	dvalue = hmax - hmin;
	
	if ( dvalue == 0.0 ) return;

	ox = setup.bx;
	oy = setup.by + setup.desc_font_height + setup.ny;
	plot_area_width = 100 -  setup.bx - setup.ex;
	plot_area_height= plot_height - oy - setup.ey - 2 * ( setup.bar_values_font_height + setup.bny ) ;
	
//	gDV.SetPredefinedPen( PEN_THICK_DARKGRAY );
	//gDV.Rectangle( xs( ox ), ys( oy ), xs( 100 - setup.ex ), ys( plot_height - setup.ey ) );
//	gDV.SetPredefinedPen( DARKGRAY );

    gDV.AssignFont( "Arial", scale( setup.desc_font_height ) );
    h_size = gDV.GetTextWidth( plot_description.c_str( ) ) / tscale;
    gDV.Write2D( xs( ox + ( 100 - setup.ex - ox - h_size ) / 2.0   ), ys( setup.by ), plot_description.c_str( ) );

// bars painting

	double cy = plot_area_height / dvalue;
	double bar_place_width = plot_area_width / (double)bar_values.size(), bar_width = bar_place_width * setup.bc;
	double zero_pos_y = oy + setup.bar_values_font_height + setup.bny - hmin * cy;

	gDV.SetPen( setup.default_pen );
	gDV.SetBrush( setup.default_brush );
    gDV.AssignFont( "Arial", scale( setup.bar_values_font_height ) );
	    
	double xbc,xb1,xb2,yb, dsize;
	for ( k=0; k<bar_values.size(); k++)
	{
		xbc = ox + ( (double)k + 0.5 ) * bar_place_width;
		xb1 = xbc - bar_width / 2.0;
		xb2 = xb1 + bar_width;
		yb = zero_pos_y + bar_values[ k ] * cy;
		gDV.Rectangle( xs( xb1 ), ys( zero_pos_y ), xs( xb2 ), ys( yb ) );
		dsize = gDV.GetTextWidth( bar_descriptions[k].c_str( ) ) / tscale;
        if ( bar_values[k] >= 0.0 ) gDV.Write2D( xs( xbc -  dsize / 2.0 ), ys( yb + 0.1 ), bar_descriptions[ k ].c_str( ) );
        else gDV.Write2D( xs( xbc -  dsize / 2.0 ), ys( yb - 0.1 - setup.bar_values_font_height ), bar_descriptions[ k ].c_str( ) );
	}
	
	gDV.SetPredefinedPen( PEN_THICK_BLACK );
    gDV.Line2D( xs( ox ),ys( zero_pos_y ),xs( ox + plot_area_width  ),ys( zero_pos_y ) );
}
