// Class automatically generated by Dev-C++ New Class wizard

#ifndef DPOINT2D_H
#define DPOINT2D_H

/**
 * No description
 */
class DPoint2D
{
	public :
		DPoint2D( ) { x = 0; y = 0;  }
		DPoint2D( double a, double b ) { x = a; y = b; }
		DPoint2D( const DPoint2D &pt ):x(pt.x),y(pt.y) { }
		DPoint2D& operator = ( const DPoint2D &p ) { x = p.x;  y = p.y; return *this; }
		void operator += ( const DPoint2D &p ) { x += p.x; y += p.y; }
 		void operator -= ( const DPoint2D &p ) { x -= p.x; y -= p.y; }
		double GetX( ) const { return x; }
		double GetY( ) const { return y; }
		void GetXY( double &a, double &b ) const { a = x;  b = y; }
		void SetXY( double a, double b )   { x = a ; y = b; }

        double x, y;
};

inline DPoint2D operator +( const DPoint2D &p1, const DPoint2D &p2) {return DPoint2D( p1.GetX() + p2.GetX(), p1.GetY() + p2.GetY() ); }
inline DPoint2D operator -( const DPoint2D &p1, const DPoint2D &p2) {return DPoint2D( p1.GetX() - p2.GetX(), p1.GetY() - p2.GetY() ); }

inline DPoint2D operator *( double a, const DPoint2D &p) { return DPoint2D( a * p.GetX(), a * p.GetY() );  }
inline DPoint2D operator *( const DPoint2D &p, double a) { return DPoint2D( a * p.GetX(), a * p.GetY() );  }

inline DPoint2D operator /( double a, const DPoint2D &p) { return DPoint2D( p.GetX() / a, p.GetY() / a );  }
inline DPoint2D operator /( const DPoint2D &p, double a) { return DPoint2D( p.GetX() / a, p.GetY() / a );  }

#endif // DPoint2D2D_H
