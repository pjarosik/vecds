// Class automatically generated by Dev-C++ New Class wizard

#include "Histogram.h" // class's header file
// class constructor
#include <iostream>
#include <fstream>
using namespace std;

CHistogram::CHistogram( const string &filename )
{
	ifstream finp( filename.c_str() );
	double v;
	if ( !finp.is_open() ) return;
	while ( !finp.eof() )
	{
		finp >> v;
		values.push_back( v );
	}
}

void CHistogram::GetCounts( vector<double> &x, vector<unsigned int> &counts, unsigned res ) const
{
	unsigned k,l;
	counts.clear();
	x.clear();
	for (k=0; k<=res; k++) counts.push_back( 0 );
	double min, max;
    GetMinMax( min, max ) ;
    double dm = ( max - min ) / (double) res;

	for (l=0; l<=res; l++) x.push_back( l * dm );
	for (k=0; k<values.size(); k++)
	{
	    for (l=0; l<=res; l++)
			if ( values[ k ] <= min + l  * dm ) { counts[ l ]++; break; }
	}

}

void CHistogram::GetCountsDouble( vector<double> &x, vector<double> &vc, unsigned res ) const
{
	vector<unsigned int> counts;
	GetCounts( x, counts, res );
	unsigned k;
	vc.resize( counts.size() );
	for (k=0; k<counts.size(); k++)
		vc[ k ] = (double)counts[ k ];
}

void CHistogram::GetCountsDoubleTrend( vector<double> &x, vector<double> &trend, unsigned res, unsigned np ) const
{
	vector<double> val;
	GetCountsDouble( x, val, res );
	trend.resize( val.size() );

	int k,l;
	for (k=0; k<val.size(); k++)
	{
		double vav = 0.0;
		int ip = k - np, ik = k + np;
		if ( ip < 0 ) { ip = 0; ik = 2 * k ; }
		if ( ik >= val.size() ) { ik = val.size() - 1; ip = k - ( val.size() - 1 - k );  }
		for ( l=ip; l<=ik;  l++)
			vav += val[ l ];
		trend[ k ] =  vav / (double)( ik - ip + 1.0);
	}
}

