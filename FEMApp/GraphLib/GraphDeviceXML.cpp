// Class automatically generated by Dev-C++ New Class wizard

#include "GraphDeviceXML.h" // class's header file

// class constructor
CXML_GraphDevice::CXML_GraphDevice( CGraphDevice *g, CXML_OutputDevice &o, const CPaintFrame *f ):CGraphDevice(f),creator( o ),gDC(g)
{
	// insert your code here
}

// class destructor
CXML_GraphDevice::~CXML_GraphDevice()
{
	// insert your code here
}

void CXML_GraphDevice::MakeContext()
{
	creator.AddHeader( "version=\"1.0\"" );
	creator.OpenNode( "graphics" );
}

void CXML_GraphDevice::DeleteContext()
{
	creator.CloseNode( );
}

void CXML_GraphDevice::SetAspect( double x, double y )
{

	creator.OpenNode("set_aspect");
        creator.OpenNode("ax");
			creator.AddText( doubletostring53( x ) );
		creator.CloseNode();
		creator.OpenNode("ay");
   			creator.AddText( doubletostring53( y ) );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::SetBrush( const DBrush &br )
{
    	creator.OpenNode("set_brush");
		    CreateColor( br.GetColor() );
    	    creator.OpenNode("style");
   				creator.AddText( br.GetStyle() );
    		creator.CloseNode();
		creator.CloseNode();
}

void CXML_GraphDevice::CreateBrushArray( const vector<DBrush> &br )
{
	unsigned int k;
	creator.OpenNode("create_brush_array");
		for (k=0; k<br.size(); k++)	CreateBrush( br[ k ] );
	creator.CloseNode();
}

void CXML_GraphDevice::CreatePenArray( const vector<DPen> &pa )
{
   	unsigned int k;
	creator.OpenNode("create_pen_array");
		for (k=0; k<pa.size(); k++) CreatePen( pa[ k ] );
	creator.CloseNode();

}

void CXML_GraphDevice::SelectArrayBrush( unsigned int i )
{
   	creator.OpenNode("select_array_brush");
		creator.OpenNode("brush_index");
   			creator.AddText( i );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::SelectArrayPen( unsigned int i )
{
   	creator.OpenNode("select_array_pen");
		creator.OpenNode("pen_index");
   			creator.AddText( i );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::SetPredefinedBrush( unsigned int i )
{
   	creator.OpenNode("set_predefined_brush");
		creator.OpenNode("brush_index");
   			creator.AddText( i );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::SetHollowBrush( )
{
   	creator.OpenNode("set_hollow_brush");
	creator.CloseNode();
}

void CXML_GraphDevice::SetPen( const DPen &pen  )
{
   	creator.OpenNode("set_pen");
		CreateColor( pen.GetColor() );
		creator.OpenNode("style");
   			creator.AddText( pen.GetStyle() );
    	creator.CloseNode();
    	creator.OpenNode("thickness");
   			creator.AddText( doubletostring53( pen.GetThickness() ) );
    	creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::SetNullPen()
{
   	creator.OpenNode("set_null_pen");
	creator.CloseNode();
}

void CXML_GraphDevice::SetPredefinedPen( unsigned int i )
{
   	creator.OpenNode("set_predefined_pen");
		creator.OpenNode("pen_index");
   			creator.AddText( i );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::SetTextColor( const DColor &col )
{
   	creator.OpenNode("text_color");
		CreateColor( col );
	creator.CloseNode();
}

void CXML_GraphDevice::SetFontHeight( double fheight )
{
   	creator.OpenNode("set_font_height");
		creator.OpenNode("height");
   			creator.AddText( doubletostring53( fheight ) );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::SetPredefinedTextColor( unsigned int i )
{
   	creator.OpenNode("set_predefined_text_color");
		creator.OpenNode("color_index");
   			creator.AddText( i );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::SetXORMode( )
{
   	creator.OpenNode("set_xor_mode");
	creator.CloseNode();
}

void CXML_GraphDevice::SetPutMode( )
{
   	creator.OpenNode("set_put_mode");
	creator.CloseNode();
}

void CXML_GraphDevice::SetBkTransparentMode()
{
   	creator.OpenNode("set_bk_transparent_mode");
	creator.CloseNode();
}

void CXML_GraphDevice::AssignFont(const char *nm, double ws)
{
	creator.OpenNode("assign_font");
       	creator.OpenNode("face");
			creator.AddText( nm );
		creator.CloseNode();
       	creator.OpenNode("height");
			creator.AddText( doubletostring53(  ws ) );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::Rectangle( double x1, double y1, double x2, double y2 )
{
   	creator.OpenNode("rectangle");
       	creator.OpenNode("x1");
			creator.AddText( doubletostring53( x1 ) );
		creator.CloseNode();
       	creator.OpenNode("y1");
			creator.AddText( doubletostring53( y1 ) );
		creator.CloseNode();
       	creator.OpenNode("x2");
			creator.AddText( doubletostring53( x2 ) );
		creator.CloseNode();
       	creator.OpenNode("y2");
			creator.AddText( doubletostring53( y2 ) );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::Line( double x1, double y1, double x2, double y2 )
{
    creator.OpenNode("line");
       	creator.OpenNode("x1");
			creator.AddText( doubletostring53( x1 ) );
		creator.CloseNode();
       	creator.OpenNode("y1");
			creator.AddText( doubletostring53( y1 ) );
		creator.CloseNode();
       	creator.OpenNode("x2");
			creator.AddText( doubletostring53( x2 ) );
		creator.CloseNode();
       	creator.OpenNode("y2");
			creator.AddText( doubletostring53( y2 ) );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::Polygon( vector<DPoint2D> &dp )
{
	unsigned k,n=(unsigned)dp.size();
    creator.OpenNode("polygon");
    for (k=0; k<n; k++)
    {
		creator.OpenNode("point");
       		creator.OpenNode("x");
				creator.AddText( doubletostring53( dp[k].GetX() ) );
			creator.CloseNode();
			creator.OpenNode("y");
				creator.AddText( doubletostring53( dp[k].GetY() ) );
			creator.CloseNode();
		creator.CloseNode();
	}
	creator.CloseNode();
}

void CXML_GraphDevice::Polyline( vector<DPoint2D> &dp )
{
   	unsigned int k,n=(unsigned)dp.size();;
    creator.OpenNode("polyline");
    for (k=0; k<n; k++)
    {
       	creator.OpenNode( "x" );
			creator.AddText( doubletostring53( dp[ k ].GetX() ) );
		creator.CloseNode();
		creator.OpenNode( "y" );
			creator.AddText( doubletostring53( dp[ k ].GetY() ) );
		creator.CloseNode();
	}
	creator.CloseNode();
}

void CXML_GraphDevice::Ellipse(double x1,double y1,double x2,double y2)
{
   creator.OpenNode("ellipse");
       	creator.OpenNode("x1");
			creator.AddText( doubletostring53( x1 ) );
		creator.CloseNode();
       	creator.OpenNode("y1");
			creator.AddText( doubletostring53( y1 ) );
		creator.CloseNode();
       	creator.OpenNode("x2");
			creator.AddText( doubletostring53( x2 ) );
		creator.CloseNode();
       	creator.OpenNode("y2");
			creator.AddText( doubletostring53( y2 ) );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::Write(double x,double y,const char *tx )
{
    creator.OpenNode("write");
       	creator.OpenNode("x1");
			creator.AddText( doubletostring53( x ) );
		creator.CloseNode();
       	creator.OpenNode("y1");
			creator.AddText( doubletostring53( y ) );
		creator.CloseNode();
       	creator.OpenNode("text");
			creator.AddText( tx );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::WriteVerically(double x,double y, const char *tx )
{
   creator.OpenNode("write_vertically");
       	creator.OpenNode("x1");
			creator.AddText( doubletostring53( x ) );
		creator.CloseNode();
       	creator.OpenNode("y1");
			creator.AddText( doubletostring53( y ) );
		creator.CloseNode();
       	creator.OpenNode("text");
			creator.AddText( tx );
		creator.CloseNode();
	creator.CloseNode();
}


// No description
void CXML_GraphDevice::CreateColor(const DColor &col)
{
	 creator.OpenNode("color");
        creator.OpenNode("R");
			creator.AddText( col.GetR() );
		creator.CloseNode();
		creator.OpenNode("G");
   			creator.AddText( col.GetG() );
		creator.CloseNode();
		creator.OpenNode("B");
   			creator.AddText( col.GetB() );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::CreatePen(const DPen &pen)
{
	 creator.OpenNode("pen");
	    CreateColor( pen.GetColor() );
        creator.OpenNode("style");
			creator.AddText( pen.GetStyle() );
		creator.CloseNode();
        creator.OpenNode("thickness");
			creator.AddText( doubletostring53( pen.GetThickness() ) );
		creator.CloseNode();
	creator.CloseNode();
}

void CXML_GraphDevice::CreateBrush(const DBrush &brush)
{
	creator.OpenNode("brush");
	    CreateColor( brush.GetColor() );
        creator.OpenNode("style");
			creator.AddText( brush.GetStyle() );
		creator.CloseNode();
	creator.CloseNode();
}
