// Class automatically generated by Dev-C++ New Class wizard

#include "PaintFrame.h" // class's header file
#include "string_tool.h"


CPaintFrame::CPaintFrame( double a, double b, double w, double h ):xp( a ), yp( b ), width( w ), height( h ), parent( 0 ), m_spaceview( 0 )
{
    
}

CPaintFrame::~CPaintFrame( ) 
{ 
    unsigned int k, n=(unsigned)ChildWindows.size( );
    for (k=0; k<n; k++) delete ChildWindows[ k ];
}

void CPaintFrame::ZoomAll(  )
{
     double x, y, px, py;
     CalculateContentSize( x, y, px, py );
     double skx, sky, 
            MinX = x, MaxX = x + px, 
            MinY = y, MaxY = y + py, mx, my, sc; 
     px = MaxX - MinX;
     py = MaxY - MinY;

     if ( ( px == 0.0 ) && ( py == 0.0 ) ) 
     { 
       mx =  width  / 2.0;
       my =  height / 2.0;
       sc = 1.0;
       SetScale( mx, my, sc ); 
       return; 
     }

     if ( py != 0.0 ) sky = height / py;
     if ( px != 0.0 ) skx = width  / px;

     if ( py == 0.0 ) 
     { 
       mx = -MinX * skx;
       my = -MinY * skx;
       sc = skx;
       SetScale( mx, my, sc );  
       return; 
     }

     if ( px == 0.0 ) 
     { 
       mx = ( width  - px * sky ) / 2.0 - MinX * sky;
       my = ( height - py * sky ) / 2.0 - MinX * sky;
       sc = sky;
       SetScale( mx, my, sc );  
       return; 
     }
		  
    if ( sky <= skx ) 
    {
        mx = ( width  - px * sky ) / 2.0 - MinX * sky;
        my = ( height - py * sky ) / 2.0 - MinY * sky;
        sc = sky;
    }
    else
    {
        mx = -MinX * skx;
        my = -MinY * skx;
        sc = skx;
    }
    SetScale( mx, my, sc );  
}

void  CPaintFrame::FitToGraphDevice( CGraphDevice &gDV, double marginx, double marginy )
{
    xp = marginx; 
	yp = marginy;

    width   = gDV.GetWidth()  - 2.0 * marginx;
    height  = gDV.GetHeight() - 2.0 * marginy;

    ZoomAll();
}

double CPaintFrame::write_set_vertically( double x1, double y1, double y2, const string  &frm, vector<double> v , CGraphDevice &gDV, unsigned sn ) const
{
	string buf;
	unsigned k,n=(unsigned)v.size();
	vector<double>::const_iterator i;
	vector<string> vals;
	double tscale = scale(), max_width = 0.0, wd, dy = ( y2 - y1 ) / (double)( n - 1.0 );
	for (i=v.begin(); i!=v.end(); ++i)
	{
		buf = string_tool::DoubleToFixedString( 4, sn, *i );
		vals.push_back( buf );
		wd = gDV.GetTextWidth( buf.c_str() ) / tscale;
		if ( wd > max_width ) max_width = wd;
	}

	double xp = x1, th = gDV.GetFontHeight() / tscale, yp;
	for(k=0; k<n; k++)
	{
		yp = y1 + k * dy - th / 2.0;
		if ( !k )
		{
			if ( dy > 0 ) yp = y1;
			else yp = y1 - th;
		}
		if ( k == n - 1 )
			if ( dy > 0 ) yp = y2 - th;
			else yp = y2;
        gDV.Write2D( scale( xp ), scale( yp ), vals[k].c_str() );
	}
	return max_width;
}

void CPaintFrame::write_set_horizontally( double x1, double y1, double x2, const string  &frm, vector<double> v, CGraphDevice &gDV, unsigned sn ) const
{
    string buf;
	unsigned k, n = (unsigned)v.size();
	vector<double>::const_iterator i;
	vector<string> vals;
	double tscale = scale(), max_width = 0.0, wd, dx = ( x2 - x1 ) / (double)( n - 1.0 );
	for (i=v.begin(); i!=v.end(); ++i)
	{
		buf = string_tool::DoubleToFixedString( 4, sn, *i );
		vals.push_back( buf );
		wd = gDV.GetTextWidth( buf.c_str() ) / tscale;
		if ( wd > max_width ) max_width = wd;
	}
	double fh = gDV.GetFontHeight() / tscale, yp = y1, xp;
	for(k=0; k<n; k++)
	{
		xp = x1 + k * dx - max_width / 2.0;
		if ( !k )
		{
			if ( dx > 0 ) xp = x1;
			else xp = x1 - gDV.GetTextWidth( vals[ 0 ].c_str() ) / tscale;
		}
		if ( k == n - 1 )
			if ( dx > 0 ) xp = x2 - max_width;
			else xp = x2; 
        gDV.Write2D( scale( xp ), scale( yp ), vals[k].c_str() );
	}
}
